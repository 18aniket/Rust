Rust has three kinds of struct types, named-field, tuple-like, and unit-like.

A named-field struct gives a name to each component.
A tuple-like struct identifies them by the order in which they appear.
Unit-like structs have no components at all.

Named-Field struct:-
--------------------
struct GreyScaleMap {
       pixels: Vec<u8>,
       size: (usize,usize)
}

You can construct a value of this type with a struct expression, like this :-
let width = 1024;
let height = 576;
let image = GrayscaleMap {
    pixels: vec![0; width * height],
    size: (width, height)
};

fn new_map(size: (usize, usize), pixels: Vec<u8>) -> GrayscaleMap {
    assert_eq!(pixels.len(), size.0 * size.1);
    GrayscaleMap { pixels, size }
}

To access a struct’s fields, use the familiar . operator:

assert_eq!(image.size, (1024, 576));
assert_eq!(image.pixels.len(), 1024 * 576);

Even if a struct is declared pub, its fields can be private:

/// A rectangle of eight-bit grayscale pixels.
pub struct GrayscaleMap {
    pixels: Vec<u8>,
    size: (usize, usize)
}

/// Two possible alternatives for what a `Broom` could be working on.
#[derive(Copy, Clone)]
enum BroomIntent { FetchWater, DumpWater }

// In this game, brooms are monsters. You'll see.
struct Broom {
    name: String,
    height: u32,
    health: u32,
    position: (f32, f32, f32),
    intent: BroomIntent
}

fn chop(b: Broom) -> (Broom, Broom) {

    // Initialize `broom1` mostly from `b`, changing only `height`. Since
    // `String` is not `Copy`, `broom1` takes ownership of `b`'s name.
    let mut broom1 = Broom { height: b.height / 2, .. b }

    // Initialize `broom2` mostly from `broom1`. Since `String` is not
    // `Copy`, we must clone `name` explicitly.
    let mut broom2 = Broom { name: broom1.name.clone(), .. broom1 };

    // Give each fragment a distinct name.
    broom1.name.push_str(" I");
    broom2.name.push_str(" II");

    (broom1, broom2)
}

let hokey = Broom {
    name: "Hokey".to_string(),
    height: 60,
    health: 100,
    position: (100.0, 200.0, 0.0),
    intent: BroomIntent::FetchWater
};

let (hokey1, hokey2) = chop(hokey);

Tuple-Like structs:-
--------------------
The second kind of struct type is called a tuple-like struct, because it resembles a tuple:

struct Bounds(usize, usize);

You construct a value of this type much as you would construct a tuple, except that you must include the struct name:

let image_bounds = Bounds(1024, 768);

The values held by a tuple-like struct are called elements, just as the values of a tuple are. You access them just as you would a tuple’s:

assert_eq!(image_bounds.0 * image_bounds.1, 786432);
Individual elements of a tuple-like struct may be public or not:

pub struct Bounds(pub usize, pub usize);

Tuple-like structs are good for newtypes, structs with a single component that you define to get stricter type checking. 
For example, if you are working with ASCII-only text, you might define a newtype like this.

struct Ascii(Vec<u8>);

Using this type for your ASCII strings is much better than simply passing around Vec<u8> buffers and explaining what they are in the comments.
The newtype helps Rust catch mistakes where some other byte buffer is passed to a function expecting ASCII text.

Unit-like structs:-
-------------------
The third kind of struct is a little obscure: it declares a struct type with no elements at all:

struct Onesuch;

A value of such a type occupies no memory, much like the unit type (). 
Rust doesn’t bother actually storing unit-like struct values in memory or generating code to operate on them, 
because it can tell everything it might need to know about the value from its type alone. 
But logically, an empty struct is a type with values like any other—or more precisely, a type of which there is only a single value:

let o = Onesuch;

You’ve already encountered a unit-like struct when reading about the .. range operator in “Fields and Elements”.
Whereas an expression like 3..5 is shorthand for the struct value Range { start: 3, end: 5 }, 
the expression .., a range omitting both endpoints, is shorthand for the unit-like struct value RangeFull.

Struct Layout:-
---------------

struct GrayscaleMap {
    pixels: Vec<u8>,
    size: (usize, usize)
}

stack frame ------------------------------------------------------------------------
                   |       | 786432 | 786432 | 1024 | 768 |
            ------------------------------------------------------------------------
                   <   |        Pixels        ><   size    >
                       |
                       |
            ------------------------------------------------------------------------
                   | 0 | 0 | 0 | ...
            ------------------------------------------------------------------------

Unlike C and C++, Rust doesn’t make specific promises about how it will order a struct’s fields or elements in memory; 
this diagram shows only one possible arrangement.

However, Rust does promise to store fields’ values directly in the struct’s block of memory. 
Whereas JavaScript, Python, and Java would put the pixels and size values each in their own heap-allocated blocks and have GrayscaleMap’s fields point at them, 
Rust embeds pixels and size directly in the GrayscaleMap value. 
Only the heap-allocated buffer owned by the pixels vector remains in its own block

You can ask Rust to lay out structures in a way compatible with C and C++, using the #[repr(C)] attribute.

Defining Methods with impl:-
----------------------------

You can define methods on your own struct types as well. 
Rather than appearing inside the struct definition, as in C++ or Java, Rust methods appear in a separate impl block.

An impl block is simply a collection of fn definitions, each of which becomes a method on the struct type named at the top of the block.

/// A first-in, first-out queue of characters.
pub struct Queue {
    older: Vec<char>,   // older elements, eldest last.
    younger: Vec<char>  // younger elements, youngest last.
}

impl Queue {
    /// Push a character onto the back of a queue.
    pub fn push(&mut self, c: char) {
        self.younger.push(c);
    }

    /// Pop a character off the front of a queue. Return `Some(c)` if there
    /// was a character to pop, or `None` if the queue was empty.
    pub fn pop(&mut self) -> Option<char> {
        if self.older.is_empty() {
            if self.younger.is_empty() {
                return None;
            }

            // Bring the elements in younger over to older, and put them in
            // the promised order.
            use std::mem::swap;
            swap(&mut self.older, &mut self.younger);
            self.older.reverse();
        }

        // Now older is guaranteed to have something. Vec's pop method
        // already returns an Option, so we're set.
        self.older.pop()
    }
}

Simply writing q.push(...) borrows a mutable reference to q, as if you had written (&mut q).push(...), 
since that’s what the push method’s self requires.

If a method doesn’t need to modify its self, then you can define it to take a shared reference instead. For example:

impl Queue {
    pub fn is_empty(&self) -> bool {
        self.older.is_empty() && self.younger.is_empty()
    }
}

Or, if a method wants to take ownership of self, it can take self by value:

impl Queue {
    pub fn split(self) -> (Vec<char>, Vec<char>) {
        (self.older, self.younger)
    }
}

Passing Self as a Box,Rc, or Arc:-
----------------------------------
A method’s self argument can also be a Box<Self>, Rc<Self>, or Arc<Self>. 
Such a method can only be called on a value of the given pointer type. 
Calling the method passes ownership of the pointer to it.

let mut bq = Box::new(Queue::new());

// `Queue::push` expects a `&mut Queue`, but `bq` is a `Box<Queue>`.
// This is fine: Rust borrows a `&mut Queue` from the `Box` for the
// duration of the call.
bq.push('■');


Type-Associated Functions:-
---------------------------
An impl block for a given type can also define functions that don’t take self as an argument at all. 
These are still associated functions, since they’re in an impl block, but they’re not methods, since they don’t take a self argument. 
To distinguish them from methods, we call them type-associated functions.

They’re often used to provide constructor functions, like this:

impl Queue {
    pub fn new() -> Queue {
        Queue { older: Vec::new(), younger: Vec::new() }
    }
}

To use this function, we refer to it as Queue::new: the type name, a double colon, and then the function name. Now our example code becomes a bit more svelte:

let mut q = Queue::new();

q.push('*');
...

It’s conventional in Rust for constructor functions to be named new; we’ve already seen Vec::new, Box::new, HashMap::new, and others.
But there’s nothing special about the name new. 
It’s not a keyword, and types often have other associated functions that serve as constructors, like Vec::with_capacity.

Although you can have many separate impl blocks for a single type, they must all be in the same crate that defines that type.

If you’re used to C++ or Java, separating a type’s methods from its definition may seem unusual, 
but there are several advantages to doing so:

//TBD.

//Generic Structs-- TBD.

Deriving Common Traits for Struct Types:-
-----------------------------------------
Structs can be very easy to write:

struct Point {
    x: f64,
    y: f64
}
However, if you were to start using this Point type, you would quickly notice that it’s a bit of a pain. As written, Point is not copyable or cloneable. 
You can’t print it with println!("{:?}", point); and it does not support the == and != operators.




