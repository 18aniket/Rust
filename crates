Once it has the source code, Cargo compiles all the crates. It runs rustc, the Rust compiler, once for each crate in the project’s dependency graph. When compiling libraries, Cargo uses the --crate-type lib option. This tells rustc not to look for a main() function but instead to produce an .rlib file containing compiled code that can be used to create binaries and other .rlib files.

When compiling a program, Cargo uses --crate-type bin, and the result is a binary executable for the target platform.

With each rustc command, Cargo passes --extern options, giving the filename of each library the crate will use. 
That way, when rustc sees a line of code like use image::png::PNGEncoder, it can figure out that image is the name of another crate, and thanks to Cargo, it knows where to find that compiled crate on disk. The Rust compiler needs access to these .rlib files because they contain the compiled code of the library. Rust will statically link that code into the final executable.

The .rlib also contains type information so Rust can check that the library features we’re using in our code actually exist in the crate and that we’re using them correctly. It also contains a copy of the crate’s public inline functions, generics, and macros, features that can’t be fully compiled to machine code until Rust sees how we use them.

Build Profiles
--------------
Command line	        Cargo.toml section used
cargo build	          [profile.dev]
cargo build --release	[profile.release]
cargo test	          [profile.test]

Modules:-
--------
Whereas crates are about code sharing between projects, modules are about code organization within a project. 
They act as Rust’s namespaces, containers for the functions, types, constants, and so on that make up your Rust program or library.

 
 mod spores {
     pub struct Spore {
         let _a: i32;
         let _b: i32;
     }
     
     pub fn AnyMethod(){
         
     }
     
     pub(crate) fn SecondMethod(){
         /*
         Anything that isn’t marked pub is private 
         and can only be used in the same module in which it is defined, or any child modules.
         */
         /*
         pub(crate), meaning that it is available anywhere inside this crate, 
         but isn’t exposed as part of the external interface.
         */
     }     
 }

Nested Modules:-
----------------

mod plant_structures{
   pub mod roots {

   }

   pub mod stems {

   }
}

If you want an item in a nested module to be visible to other crates, be sure to mark it and all enclosing modules as public.

mod plant_structures{
   pub mod roots {
       pub mod products {
          pub(in crate::plant_structures::roots) struct Cytokinin{
          }
       }
       use products::Cytokinin;//OK
   }
       use roots::products::Cytokinin; //Error
}

In this way, we could write out a whole program, 
with a huge amount of code and a whole hierarchy of modules, related in whatever ways we wanted, all in a single source file.

Modules in seperate files:-
---------------------------

mode spores;

Earlier, we included the body of the spores module, wrapped in curly braces. 
Here, we’re instead telling the Rust compiler that the spores module lives in a separate file, called spores.rs:

//spore.rs

pub struct Spore{

}

pub fn produce_spore(){

}

pub(crate) fn genes(){

}

fn recombine(){

}
spores.rs contains only the items that make up the module.
A module can have its own directory. When Rust sees mod spores;, 
it checks for both spores.rs and spores/mod.rs; if neither file exists, or both exist, that’s an error. 


In main.rs, we declare the plant_structures modules:-

pub mod plant_structures;

This causes Rust to load plant_structures/mod.rs, which declares the three sub modules:-
pub mod roots;
pub mod stems;
pub mod leaves;

Path And Imports:-
------------------

The :: operator is used to access feature of a module.Code anywhere in your project can refer to any standard library feature by
writing out its path:

if s1 > s2 {
   std::mem::swap(&mut s1,&mut s2);
}

std is the name of the standard library.The path std refers to the top-level module of the standard library.std::mem is a submodule
within the standard library, and std::mem::swap is the public fn of the module.

use std::mem;
if s1 > s2 {
  mem::swap(&mut s1,&mut s2);
}

The use declaration causes the name mem to be a local alias for std::mem throughout the enclosing block or module.

You can use as to import an item but give it a different name locally:
use std::io::Result as IOResult;

Modules do not automatically inherit names from their parent modules. For example, suppose we have this in our proteins/mod.rs
// proteins/mod.rs
pub enum AminoAcid { ... }
pub mod synthesis;

Then the code in synthesis.rs does not automatically see the type AminoAcid:
// proteins/synthesis.rs
pub fn synthesize(seq: &[AminoAcid])

Instead, each module starts with a blank slate and must import the names it uses:

// proteins/synthesis.rs
use super::AminoAcid;  // explicitly import from parent

pub fn synthesize(seq: &[AminoAcid])  // ok

By default, paths are relative to the current module:
// in proteins/mod.rs

// import from a submodule
use synthesis::synthesize;

self is also a synonym for the current module, so we could write either:

// in proteins/mod.rs

// import names from an enum,
// so we can write `Lys` for lysine, rather than `AminoAcid::Lys`
use self::AminoAcid::*;

or simply:

// in proteins/mod.rs

use AminoAcid::*;

The keywords super and crate have a special meaning in paths: super refers to the parent module, 
and crate refers to the crate containing the current module.

Handling ambiguity:
-------------------

mod image {
    pub struct Sampler{

    }
}

use image::Pixels;

If you have a module with the same name as a crate that you are using, then referring to their contents takes some care. 
For example, if your program lists the image crate as a dependency in its Cargo.toml file, but also has a module named image, 
then paths starting with image are ambiguous.

To resolve the ambiguity, Rust has a special kind of path called an absolute path, starting with ::, which always refers to an external crate. To refer to the Pixels type in the image crate, you can write:

use ::image::Pixels;        // the `image` crate's `Pixels`
To refer to your own module’s Sampler type, you can write:

use self::image::Sampler;   // the `image` module's `Sampler.

