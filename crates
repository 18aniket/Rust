Once it has the source code, Cargo compiles all the crates. It runs rustc, the Rust compiler, once for each crate in the project’s dependency graph. When compiling libraries, Cargo uses the --crate-type lib option. This tells rustc not to look for a main() function but instead to produce an .rlib file containing compiled code that can be used to create binaries and other .rlib files.

When compiling a program, Cargo uses --crate-type bin, and the result is a binary executable for the target platform.

With each rustc command, Cargo passes --extern options, giving the filename of each library the crate will use. 
That way, when rustc sees a line of code like use image::png::PNGEncoder, it can figure out that image is the name of another crate, and thanks to Cargo, it knows where to find that compiled crate on disk. The Rust compiler needs access to these .rlib files because they contain the compiled code of the library. Rust will statically link that code into the final executable.

The .rlib also contains type information so Rust can check that the library features we’re using in our code actually exist in the crate and that we’re using them correctly. It also contains a copy of the crate’s public inline functions, generics, and macros, features that can’t be fully compiled to machine code until Rust sees how we use them.

Build Profiles
--------------
Command line	        Cargo.toml section used
cargo build	          [profile.dev]
cargo build --release	[profile.release]
cargo test	          [profile.test]

Modules:-
--------
Whereas crates are about code sharing between projects, modules are about code organization within a project. 
They act as Rust’s namespaces, containers for the functions, types, constants, and so on that make up your Rust program or library.

 
 mod spores {
     pub struct Spore {
         let _a: i32;
         let _b: i32;
     }
     
     pub fn AnyMethod(){
         
     }
     
     pub(crate) fn SecondMethod(){
         /*
         Anything that isn’t marked pub is private 
         and can only be used in the same module in which it is defined, or any child modules.
         */
         /*
         pub(crate), meaning that it is available anywhere inside this crate, 
         but isn’t exposed as part of the external interface.
         */
     }
     
     
 }
