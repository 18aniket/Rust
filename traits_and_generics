Traits are Rust’s take on interfaces or abstract base classes. At first, they look just like interfaces in Java or C#.

The trait for writing bytes is called std::io::Write, and its definition in the standard library starts out like this:

trait Write {
    fn write(&mut self, buf: &[u8]) -> Result<usize>;
    fn flush(&mut self) -> Result<()>;

    fn write_all(&mut self, buf: &[u8]) -> Result<()> { ... }
    ...
}

 Code that uses a writer without caring about its type looks like this:

use std::io::Write;

fn say_hello(out: &mut dyn Write) -> std::io::Result<()> {
    out.write_all(b"hello world\n")?;
    out.flush()
}

The type of out is &mut dyn Write, meaning “a mutable reference to any value that implements the Write trait.” We can pass say_hello a mutable reference to any such value:

use std::fs::File;
let mut local_file = File::create("hello.txt")?;
say_hello(&mut local_file)?;  // works

let mut bytes = vec![];
say_hello(&mut bytes)?;  // also works
assert_eq!(bytes, b"hello world\n");

We’ll explain why adding a trait to a type costs no extra memory and how to use traits without virtual method call overhead. 
We’ll see that built-in traits are the hook into the language that Rust provides for operator overloading and other features. 
And we’ll cover the Self type, associated functions, and associated types, 
three features Rust lifted from Haskell that elegantly solve problems that other languages address with workarounds and hacks.

Generics are the other flavor of polymorphism in Rust. Like a C++ template, a generic function or type can be used with values of many different types:

/// Given two values, pick whichever one is less.
fn min<T: Ord>(value1: T, value2: T) -> T {
    if value1 <= value2 {
        value1
    } else {
        value2
    }
}

The <T: Ord> in this function means that min can be used with arguments of any type T that implements the Ord trait—that is, 
any ordered type. A requirement like this is called a bound, because it sets limits on which types T could possibly be. 
The compiler generates custom machine code for each type T that you actually use.

Generics and traits are closely related: generic functions use traits in bounds to spell out what types of arguments they can be applied to. 
So we’ll also talk about how &mut dyn Write and <T: Write> are similar, how they’re different, and how to choose between these two ways of using traits.

Using Traits:-
--------------
A trait  is a feature that any given type may or may not support. Most often, a trait represents a capability: something a type can do.

A value that implements std::io::Write can write out bytes.

A value that implements std::iter::Iterator can produce a sequence of values.

A value that implements std::clone::Clone can make clones of itself in memory.

A value that implements std::fmt::Debug can be printed using println!() with the {:?} format specifier.

Those four traits are all part of Rust’s standard library, and many standard types implement them. For example:

std::fs::File implements the Write trait; it writes bytes to a local file. std::net::TcpStream writes to a network connection. 
Vec<u8> also implements Write. Each .write() call on a vector of bytes appends some data to the end.

Range<i32> (the type of 0..10) implements the Iterator trait, as do some iterator types associated with slices, hash tables, and so on.

Most standard library types implement Clone. 
The exceptions are mainly types like TcpStream that represent more than just data in memory.

Likewise, most standard library types support Debug.

There is one unusual rule about trait methods: the trait itself must be in scope. Otherwise, all its methods are hidden:
let mut buf: Vec<u8> = vec![];
buf.write_all(b"hello")?;  // error: no method named `write_all`

In this case, the compiler prints a friendly error message that suggests adding use std::io::Write; and indeed that fixes the problem:

use std::io::Write;

let mut buf: Vec<u8> = vec![];
buf.write_all(b"hello")?;  // ok

Rust makes you import the traits you plan to use, crates are free to take advantage of this superpower. 
To get a conflict, you’d have to import two traits that add a method with the same name to the same type. 
This is rare in practice. (If you do run into a conflict, you can spell out what you want using fully qualified method syntax.)

The reason Clone and Iterator methods work without any special imports is that they’re always in scope by default: 
they’re part of the standard prelude, names that Rust automatically imports into every module. 
In fact, the prelude is mostly a carefully chosen selection of traits.

C++ and C# programmers will already have noticed that trait methods are like virtual methods. 
Still, calls like the one shown above are fast, as fast as any other method call.

Only calls through &mut dyn Write incur the overhead of a dynamic dispatch, 
also known as a virtual method call, which is indicated by the dyn keyword in the type. dyn Write is known as a trait object.

Trait Objects:-
---------------
There are two ways of using traits to write polymorphic code in Rust: trait objects and generics. 
use std::io::Write;

let mut buf: Vec<u8> = vec![];
let writer: dyn Write = buf;  // error: `Write` does not have a constant size.

A variable’s size has to be known at compile time, and types that implement Write can be any size.

This may be surprising if you’re coming from C# or Java, but the reason is simple. 
In Java, a variable of type OutputStream (the Java standard interface analogous to std::io::Write) 
is a reference to any object that implements OutputStream. The fact that it’s a reference goes without saying. 
It’s the same with interfaces in C# and most other languages.

What we want in Rust is the same thing, but in Rust, references are explicit

let mut buf: Vec<u8> = vec![];
let writer: &mut dyn Write = &mut buf;  // ok

A reference to a trait type, like writer, is called a trait object.
What makes a trait object different is that Rust usually doesn’t know the type of the referent at compile time.

This is strictly for Rust’s own use behind the scenes: when you call writer.write(data), 
Rust needs the type information to dynamically call the right write method depending on the type of *writer. 
You can’t query the type information directly.
Rust does not support downcasting from the trait object &mut dyn Write back to a concrete type like Vec<u8>.

Trait object layout:-
---------------------
TODO:-VPTR CONCEPTS

Rust automatically converts ordinary references into trait objects when needed. 
This is why we’re able to pass &mut local_file to say_hello in this example:

let mut local_file = File::create("hello.txt")?;
say_hello(&mut local_file)?;

The type of &mut local_file is &mut File, and the type of the argument to say_hello is &mut dyn Write. 
Since a File is a kind of writer, Rust allows this, automatically converting the plain reference to a trait object.

Likewise, Rust will happily convert a Box<File> to a Box<dyn Write>, a value that owns a writer in the heap:

let w: Box<dyn Write> = Box::new(local_file);
Box<dyn Write>, like &mut dyn Write, is a fat pointer: it contains the address of the writer itself and the address of the vtable. 
The same goes for other pointer types, like Rc<dyn Write>.

