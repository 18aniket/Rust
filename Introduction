Why Rust ?
The Rust language makes you a simple promise: if your program passes the compiler’s checks, it is free of undefined behavior. 
Dangling pointers, double-frees, and null pointer dereferences are all caught at compile time. Array references are secured with a mix of compile-time and run-time checks ,so there are no buffer overruns: the Rust equivalent of our unfortunate C program exits safely with an error message.

3 major reasons:-
Parallel Programming Is Tamed
And Yet Rust Is Still Fast
Rust Makes Collaboration Easier

Install Rust on your computer:-
The best way to install Rust is to use rustup. Go to https://rustup.rs and follow the instructions there.
We prefer rustup because it’s a tool for managing Rust installations, like RVM for Ruby or NVM for Node. For example, when a new version of Rust is released, you’ll be able to upgrade with zero clicks by typing rustup update.

In any case, once you’ve completed the installation, you should have three new commands available at your command line:

$cargo --version
cargo 1.66.0 (d65d197ad 2022-11-15)

$rustc --version
rustc 1.66.0 (69f9c33d7 2022-12-12)

$rustdoc --version
rustdoc 1.66.0 (69f9c33d7 2022-12-12)

cargo is Rust’s compilation manager, package manager, and general-purpose tool. You can use Cargo to start a new project, build and run your program, and manage any external libraries your code depends on.
rustc is the Rust compiler. Usually we let Cargo invoke the compiler for us, but sometimes it’s useful to run it directly.
rustdoc is the Rust documentation tool. If you write documentation in comments of the appropriate form in your program’s source code, rustdoc can build nicely formatted HTML from them. Like rustc, we usually let Cargo run rustdoc for us.
