Language extension traits:
--------------------------
These include Drop, Deref and DerefMut, and the conversion traits From and Into. 


Marker traits:
--------------
These are traits mostly used to bound generic type variables to express constraints you can’t capture otherwise. 
These include Sized and Copy.


Public vocabulary traits:
-------------------------
These don’t have any magical compiler integration; you could define equivalent traits in your own code. 
But they serve the important goal of setting down conventional solutions for common problems. 

These are especially valuable in public interfaces between crates and modules: by reducing needless variation, 
they make interfaces easier to understand, but they also increase the likelihood that features from different crates can simply be plugged together directly, 
without boilerplate or custom glue code.

These include Default, the reference-borrowing traits AsRef, AsMut, Borrow and BorrowMut; 
the fallible conversion traits TryFrom and TryInto; and the ToOwned trait, a generalization of Clone.

Trait	  Description
-----   -----------
Drop	- Destructors. Cleanup code that Rust runs automatically whenever a value is dropped.
Sized	- Marker trait for types with a fixed size known at compile time, as opposed to types (such as slices) that are dynamically sized.
Clone	- Types that support cloning values.
Copy	- Marker trait for types that can be cloned simply by making a byte-for-byte copy of the memory containing the value.
Deref and DerefMut	- Traits for smart pointer types.
Default	- Types that have a sensible “default value.”
AsRef and AsMut	- Conversion traits for borrowing one type of reference from another.
Borrow and BorrowMut	- Conversion traits, like AsRef/AsMut, but additionally guaranteeing consistent hashing, ordering, and equality.
From and Into	- Conversion traits for transforming one type of value into another.
TryFrom and TryInto	- Conversion traits for transforming one type of value into another, for transformations that might fail.
ToOwned	- Conversion trait for converting a reference to an owned value.

Drop:-
------
When a value’s owner goes away, we say that Rust drops the value. 
Dropping a value entails freeing whatever other values, heap storage, and system resources the value owns.
Drops occur under a variety of circumstances: when a variable goes out of scope; at the end of an expression statement; when you truncate a vector, removing elements from its end; and so on.

struct Appellation {
    name: String,
    nicknames: Vec<String>
}

An Appellation owns heap storage for the strings’ contents and the vector’s buffer of elements. 
Rust takes care of cleaning all that up whenever an Appellation is dropped, without any further coding necessary on your part. 
However, if you want, you can customize how Rust drops values of your type by implementing the std::ops::Drop trait:

trait Drop {
    fn drop(&mut self);
}

An implementation of Drop is analogous to a destructor in C++, or a finalizer in other languages. 
When a value is dropped, if it implements std::ops::Drop, Rust calls its drop method, 
before proceeding to drop whatever values its fields or elements own, as it normally would. 
This implicit invocation of drop is the only way to call that method; if you try to invoke it explicitly yourself, 
Rust flags that as an error.

Because Rust calls Drop::drop on a value before dropping its fields or elements, 
the value the method receives is always still fully initialized. An implementation of Drop for our Appellation type can make full use of its fields:

impl Drop for Appellation {
    fn drop(&mut self) {
        print!("Dropping {}", self.name);
        if !self.nicknames.is_empty() {
            print!(" (AKA {})", self.nicknames.join(", "));
        }
        println!("");
    }
}

Given that implementation, we can write the following:

{
    let mut a = Appellation {
        name: "Zeus".to_string(),
        nicknames: vec!["cloud collector".to_string(),
                        "king of the gods".to_string()]
    };

    println!("before assignment");
    a = Appellation { name: "Hera".to_string(), nicknames: vec![] };
    println!("at end of block");
}

When we assign the second Appellation to a, the first is dropped, and when we leave the scope of a, the second is dropped. 
This code prints the following:

before assignment
Dropping Zeus (AKA cloud collector, king of the gods)
at end of block
Dropping Hera

Since our std::ops::Drop implementation for Appellation does nothing but print a message, how, exactly, does its memory get cleaned up? 
The Vec type implements Drop, dropping each of its elements and then freeing the heap-allocated buffer they occupied. 
A String uses a Vec<u8> internally to hold its text, so String need not implement Drop itself; it lets its Vec take care of freeing the characters. 
The same principle extends to Appellation values: when one gets dropped, in the end it is Vec’s implementation of Drop that actually takes care of freeing each of the strings’ contents, 
and finally freeing the buffer holding the vector’s elements. 
As for the memory that holds the Appellation value itself, it too has some owner, perhaps a local variable or some data structure, which is responsible for freeing it.

If a variable’s value gets moved elsewhere, so that the variable is uninitialized when it goes out of scope, 
then Rust will not try to drop that variable: there is no value in it to drop.

This principle holds even when a variable may or may not have had its value moved away, depending on the flow of control. 
In cases like this, 
Rust keeps track of the variable’s state with an invisible flag indicating whether the variable’s value needs to be dropped or not:

let p;
{
    let q = Appellation { name: "Cardamine hirsuta".to_string(),
                          nicknames: vec!["shotweed".to_string(),
                                          "bittercress".to_string()] };
    if complicated_condition() {
        p = q;
    }
}
println!("Sproing! What was that?");

Depending on whether complicated_condition returns true or false, either p or q will end up owning the Appellation, 
with the other uninitialized. Where it lands determines whether it is dropped before or after the println!, 
since q goes out of scope before the println!, and p after. 
Although a value may be moved from place to place, Rust drops it only once.

You usually won’t need to implement std::ops::Drop unless you’re defining a type that owns resources Rust doesn’t already know about. 
For example, on Unix systems, 
Rust’s standard library uses the following type internally to represent an operating system file descriptor.

struct FileDesc {
    fd: c_int,
}

impl Drop for FileDesc {
    fn drop(&mut self) {
        let _ = unsafe { libc::close(self.fd) };
    }
}
Here, libc::close is the Rust name for the C library’s close function. 
Rust code may call C functions only within unsafe blocks, so the library uses one here.

If a type implements Drop, it cannot implement the Copy trait. If a type is Copy, 
that means that simple byte-for-byte duplication is sufficient to produce an independent copy of the value. 
But it is typically a mistake to call the same drop method more than once on the same data.


The standard prelude includes a function to drop a value, drop, but its definition is anything but magical:

fn drop<T>(_x: T) { }

In other words, it receives its argument by value, taking ownership from the caller—and then does nothing with it. 
Rust drops the value of _x when it goes out of scope, as it would for any other variable.

Sized:-
-------
A sized type is one whose values all have the same size in memory.
Almost all types in Rust are sized: every u64 takes eight bytes, every (f32, f32, f32) tuple twelve. 
Even enums are sized: no matter which variant is actually present, an enum always occupies enough space to hold its largest variant.
And although a Vec<T> owns a heap-allocated buffer whose size can vary, the Vec value itself is a pointer to the buffer, its capacity, and its length, 
so Vec<T> is a sized type.

All sized types implement the std::marker::Sized trait, which has no methods or associated types. 
Rust implements it automatically for all types to which it applies; you can’t implement it yourself.
The only use for Sized is as a bound for type variables: a bound like T: Sized requires T to be a type whose size is known at compile time. 
Traits of this sort are called marker traits.

However, Rust also has a few unsized types whose values are not all the same size. 
For example, the string slice type str (note, without an &) is unsized. 
The string literals "diminutive" and "big" are references to str slices that occupy ten and three bytes. 

TO BE DEEP DIVE IN.


Clone:-
-------
The std::clone::Clone trait is for types that can make copies of themselves. Clone is defined as follows:
trait Clone: Sized {
    fn clone(&self) -> Self;
    fn clone_from(&mut self, source: &Self) {
        *self = source.clone()
    }
}

The clone method should construct an independent copy of self and return it.
Since this method’s return type is Self and functions may not return unsized values, the Clone trait itself extends the Sized trait: 
this has the effect of bounding implementations’ Self types to be Sized.
Cloning a value usually entails allocating copies of anything it owns, as well, so a clone can be expensive, in both time and memory.

For example, cloning a Vec<String> not only copies the vector, but also copies each of its String elements. 
This is why Rust doesn’t just clone values automatically, but instead requires you to make an explicit method call.

The reference-counted pointer types like Rc<T> and Arc<T> are exceptions: 
cloning one of these simply increments the reference count and hands you a new pointer.

The clone_from method modifies self into a copy of source. 
The default definition of clone_from simply clones source and then moves that into *self.

For example, suppose s and t are Strings. The statement s = t.clone();
must clone t, drop the old value of s, and then move the cloned value into s; that’s one heap allocation and one heap deallocation.

But if the heap buffer belonging to the original s has enough capacity to hold t’s contents, no allocation or deallocation is necessary: 
you can simply copy t’s text into s’s buffer and adjust the length.

In generic code, you should use clone_from whenever possible to take advantage of optimized implementations when present.

If your Clone implementation simply applies clone to each field or element of your type and then constructs a new value from those clones, 
and the default definition of clone_from is good enough ,then Rust will implement that for you: simply put #[derive(Clone)] above your type definition.

Copy:-
------
For most types, assignment moves values, rather than copying them. Moving values makes it much simpler to track the resources they own.
But in “Copy Types: The Exception to Moves”, we pointed out the exception: simple types that don’t own any resources can be Copy types, 
where assignment makes a copy of the source, rather than moving the value and leaving the source uninitialized.

At that time, we left it vague exactly what Copy was, but now we can tell you: 
a type is Copy if it implements the std::marker::Copy marker trait, which is defined as follows:

trait Copy: Clone { }

This is certainly easy to implement for your own types:

impl Copy for MyType { }

Types that own any other resources, like heap buffers or operating system handles, cannot implement Copy.

As with Clone, you can ask Rust to derive Copy for you, using #[derive(Copy)]. You will often see both derived at once, with #[derive(Copy, Clone)].

Deref and DerefMut:-
--------------------
You can specify how dereferencing operators like * and . behave on your types by implementing the 
std::ops::Deref and std::ops::DerefMut traits.
Pointer types like Box<T> and Rc<T> implement these traits so that they can behave as Rust’s built-in pointer types do.
For example, if you have a Box<Complex> value b, then *b refers to the Complex value that b points to, 
and b.re refers to its real component.

The traits are defined like this:

trait Deref {
    type Target: ?Sized;
    fn deref(&self) -> &Self::Target;
}

trait DerefMut: Deref {
    fn deref_mut(&mut self) -> &mut Self::Target;
}

The Deref and DerefMut traits play another role as well. Since deref takes a &Self reference and returns a &Self::Target reference, 
Rust uses this to automatically convert references of the former type into the latter.


Default:-
---------
Some types have a reasonably obvious default value: the default vector or string is empty, the default number is zero, the default Option is None, and so on.

Types like this can implement the std::default::Default trait:

trait Default {
    fn default() -> Self;
}

The default method simply returns a fresh value of type Self. String’s implementation of Default is straightforward:

impl Default for String {
    fn default() -> String {
        String::new()
    }
}

Rust does not implicitly implement Default for struct types, 
but if all of a struct’s fields implement Default, you can implement Default for the struct automatically using #[derive(Default)]

//DEEP DIVE IN -- TODO

AsRef and AsMut:-
-----------------
When a type implements AsRef<T>, that means you can borrow a &T from it efficiently.
AsMut is the analogue for mutable references. Their definitions are as follows:

trait AsRef<T: ?Sized> {
    fn as_ref(&self) -> &T;
}

trait AsMut<T: ?Sized> {
    fn as_mut(&mut self) -> &mut T;
}

So, for example, Vec<T> implements AsRef<[T]>, and String implements AsRef<str>. 
You can also borrow a String’s contents as an array of bytes, so String implements AsRef<[u8]> as well.

AsRef is typically used to make functions more flexible in the argument types they accept. 
For example, the std::fs::File::open function is declared like this:

fn open<P: AsRef<Path>>(path: P) -> Result<File>

What open really wants is a &Path, the type representing a filesystem path. 
But with this signature, open accepts anything it can borrow a &Path from—that is, anything that implements AsRef<Path>.

ToOwned:-
---------

Given a reference, the usual way to produce an owned copy of its referent is to call clone, assuming the type implements std::clone::Clone. 
But what if you want to clone a &str or a &[i32]?
What you probably want is a String or a Vec<i32>, but Clone’s definition doesn’t permit that: by definition, 
cloning a &T must always return a value of type T, and str and [u8] are unsized; 
they aren’t even types that a function could return.

The std::borrow::ToOwned trait provides a slightly looser way to convert a reference to an owned value:

trait ToOwned {
    type Owned: Borrow<Self>;
    fn to_owned(&self) -> Self::Owned;
}

Unlike clone, which must return exactly Self, to_owned can return anything you could borrow a &Self from: the Owned type must implement Borrow<Self>. 
You can borrow a &[T] from a Vec<T>, so [T] can implement ToOwned<Owned=Vec<T>>, as long as T implements Clone, so that we can copy the slice’s elements into the vector. 
Similarly, str implements ToOwned<Owned=String>, Path implements ToOwned<Owned=PathBuf>, and so on.

From and Into:-
---------------

The std::convert::From and std::convert::Into traits represent conversions that consume a value of one type and return a value of another.
Whereas the AsRef and AsMut traits borrow a reference of one type from another, 
From and Into take ownership of their argument, transform it, and then return ownership of the result back to the caller.

trait Into<T>: Sized {
    fn into(self) -> T;
}

trait From<T>: Sized {
    fn from(other: T) -> Self;
}

You generally use Into to make your functions more flexible in the arguments they accept. For example, if you write:

use std::net::Ipv4Addr;
fn ping<A>(address: A) -> std::io::Result<bool>
    where A: Into<Ipv4Addr>
{
    let ipv4_address = address.into();
    ...
}

then ping can accept not just an Ipv4Addr as an argument, but also a u32 or a [u8; 4] array, 
since those types both conveniently happen to implement Into<Ipv4Addr>.
(It’s sometimes useful to treat an IPv4 address as a single 32-bit value, or an array of 4 bytes.)

As with AsRef in the previous section, the effect is much like that of overloading a function in C++. 
With the definition of ping from before, we can make any of these calls:

println!("{:?}", ping(Ipv4Addr::new(23, 21, 68, 141))); // pass an Ipv4Addr
println!("{:?}", ping([66, 146, 219, 98]));             // pass a [u8; 4]
println!("{:?}", ping(0xd076eb94_u32));                 // pass a u32


The From trait, however, plays a different role. 
The from method serves as a generic constructor for producing an instance of a type from some other single value.

or example, rather than Ipv4Addr having two methods named from_array and from_u32, 
it simply implements From<[u8;4]> and From<u32>, allowing us to write:

let addr1 = Ipv4Addr::from([66, 146, 219, 98]);
let addr2 = Ipv4Addr::from(0xd076eb94_u32);

However, cheap conversions are not part of Into and From’s contract. 
Whereas AsRef and AsMut conversions are expected to be cheap, From and Into conversions may allocate, copy, or otherwise process the value’s contents.

The ? operator uses From and Into to help clean up code in functions that 
could fail in multiple ways by automatically converting from specific error types to general ones when needed.

//TODO - Deep Dive In


