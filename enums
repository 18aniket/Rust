Simple, C-style enums are straightforward:

enum Ordering {
    Less,
    Equal,
    Greater,
}

use std::cmp::Ordering;

fn compare(n: i32, m: i32) -> Ordering {
    if n < m {
        Ordering::Less
    } else if n > m {
        Ordering::Greater
    } else {
        Ordering::Equal
    }
}

or with all its constructors:

use std::cmp::Ordering::{self, *};    // `*` to import all children

fn compare(n: i32, m: i32) -> Ordering {
    if n < m {
        Less
    } else if n > m {
        Greater
    } else {
        Equal
    }
}

In memory, values of C-style enums are stored as integers. Occasionally it’s useful to tell Rust which integers to use:

enum HttpStatus {
    Ok = 200,
    NotModified = 304,
    NotFound = 404,
    ...
}

By default, Rust stores C-style enums using the smallest built-in integer type that can accommodate them. Most fit in a single byte:

use std::mem::size_of;
assert_eq!(size_of::<Ordering>(), 1);
assert_eq!(size_of::<HttpStatus>(), 2);  // 404 doesn't fit in a u8

You can override Rust’s choice of in-memory representation by adding a #[repr] attribute to the enum.

Casting a C-style enum to an integer is allowed:

assert_eq!(HttpStatus::Ok as i32, 200);

or use the enum_primitive crate. It contains a macro that autogenerates this kind of conversion code for you.

As with structs, the compiler will implement features like the == operator for you, but you have to ask:

#[derive(Copy, Clone, Debug, PartialEq, Eq)]
enum TimeUnit {
    Seconds, Minutes, Hours, Days, Months, Years,
}

Enums can have methods, just like structs:

impl TimeUnit {
    /// Return the plural noun for this time unit.
    fn plural(self) -> &'static str {
        match self {
            TimeUnit::Seconds => "seconds",
            TimeUnit::Minutes => "minutes",
            TimeUnit::Hours => "hours",
            TimeUnit::Days => "days",
            TimeUnit::Months => "months",
            TimeUnit::Years => "years",
        }
    }

    /// Return the singular noun for this time unit.
    fn singular(self) -> &'static str {
        self.plural().trim_end_matches('s')
    }
}

Enums with Data:-
-----------------
Some programs always need to display full dates and times down to the millisecond, but for most applications, 
it’s more user-friendly to use a rough approximation, like “two months ago.” 
We can write an enum to help with that, using the enum defined earlier:

/// A timestamp that has been deliberately rounded off, so our program
/// says "6 months ago" instead of "February 9, 2016, at 9:49 AM".
#[derive(Copy, Clone, Debug, PartialEq)]
enum RoughTime {
    InThePast(TimeUnit, u32),
    JustNow,
    InTheFuture(TimeUnit, u32),
}

Two of the variants in this enum, InThePast and InTheFuture, take arguments. These are called tuple variants.
Like tuple structs, these constructors are functions that create new RoughTime values:

let four_score_and_seven_years_ago =
    RoughTime::InThePast(TimeUnit::Years, 4 * 20 + 7);

let three_hours_from_now =
    RoughTime::InTheFuture(TimeUnit::Hours, 3);

Enums can also have struct variants, which contain named fields, just like ordinary structs:

enum Shape {
    Sphere { center: Point3d, radius: f32 },
    Cuboid { corner1: Point3d, corner2: Point3d },
}

let unit_sphere = Shape::Sphere {
    center: ORIGIN,
    radius: 1.0,
};

In all, Rust has three kinds of enum variant, echoing the three kinds of struct we showed in the previous chapter. 
Variants with no data correspond to unit-like structs. Tuple variants look and function just like tuple structs. 
Struct variants have curly braces and named fields. A single enum can have variants of all three kinds:

enum RelationshipStatus {
    Single,
    InARelationship,
    ItsComplicated(Option<String>),
    ItsExtremelyComplicated {
        car: DifferentialEquation,
        cdr: EarlyModernistPoem,
    },
}

Enums in Memory :-
==================
In memory, enums with data are stored as a small integer tag, plus enough memory to hold all the fields of the largest variant. 
The tag field is for Rust’s internal use. 


--------------------------------------------
|    0 |  5  |        |             87    |    InThePast(Years, 87)
--------------------------------------------
   |      |       |            |
   |      |       |            |
   |      |       |            |
   |      |       |            |
   |      |       |         4 bytes for the u32 field
   |      |      2 unused bytes (padding for alignment)
   |    1 byte for the TimeUnit field(5 means years)
1 tag byte (0 means InThePast)


--------------------------------------------
|   2  |  2  |        |             3    |    InThePast(Hours, 3)
--------------------------------------------


--------------------------------------------
|   2  |                                   |    JustNow
--------------------------------------------

 For instance, some generic structs can be stored without a tag at all.

Rich Data Structures Using Enums:-
----------------------------------
Enums are also useful for quickly implementing tree-like data structures. 
For example, suppose a Rust program needs to work with arbitrary JSON data. 
In memory, any JSON document can be represented as a value of this Rust type:

use std::collections::HashMap;

enum Json {
    Null,
    Boolean(bool),
    Number(f64),
    String(String),
    Array(Vec<Json>),
    Object(Box<HashMap<String, Json>>),
}

What’s remarkable here is how easy it was to set this up. In C++, one might write a class for this:

class JSON {
private:
    enum Tag {
        Null, Boolean, Number, String, Array, Object
    };
    union Data {
        bool boolean;
        double number;
        shared_ptr<string> str;
        shared_ptr<vector<JSON>> array;
        shared_ptr<unordered_map<string, JSON>> object;

        Data() {}
        ~Data() {}
        ...
    };

    Tag tag;
    Data data;

public:
    bool is_null() const { return tag == Null; }
    bool is_boolean() const { return tag == Boolean; }
    bool get_boolean() const {
        assert(is_boolean());
        return data.boolean;
    }
    void set_boolean(bool value) {
        this->~JSON();  // clean up string/array/object value
        tag = Boolean;
        data.boolean = value;
    }
    ...
};

Generic Enums:-
---------------
Enums can be generic.

enum Option<T> {
    None,
    Some(T),
}

enum Result<T, E> {
    Ok(T),
    Err(E),
}

These types are familiar enough by now, and the syntax for generic enums is the same as for generic structs.
One unobvious detail is that Rust can eliminate the tag field of Option<T> when the type T is a reference, Box, or other smart pointer type.

Patterns:-
----------
Recall the definition of our RoughTime type from earlier in this chapter:

enum RoughTime {
    InThePast(TimeUnit, u32),
    JustNow,
    InTheFuture(TimeUnit, u32),
}

You need to access the TimeUnit and u32 fields inside the value. 
Rust doesn’t let you access them directly, by writing rough_time.0 and rough_time.1, because after all, 
the value might be RoughTime::JustNow, which has no fields. But then, how can you get the data out?

You need a match expression:

 1  fn rough_time_to_english(rt: RoughTime) -> String {
 2      match rt {
 3          RoughTime::InThePast(units, count) =>
 4              format!("{} {} ago", count, units.plural()),
 5          RoughTime::JustNow =>
 6              format!("just now"),
 7          RoughTime::InTheFuture(units, count) =>
 8              format!("{} {} from now", count, units.plural()),
 9      }
10  }

match performs pattern matching; in this example, the patterns are the parts that appear before the => symbol on lines 3, 5, and 7.

Patterns that match RoughTime values look just like the expressions used to create RoughTime values.

This is no coincidence. Expressions produce values; patterns consume values. The two use a lot of the same syntax.

Let’s step through what happens when this match expression runs. 
Suppose rt is the value RoughTime::InTheFuture(TimeUnit::Months, 1). 
Rust first tries to match this value against the pattern on line 3.

Value:-   RoughTime::InTheFuture(TimeUnit::Months,1)
Pattern:- RoughTime::InThePast(units,count)                     - FAILURE

The patterns on lines 3 and 5 fail to match. But the pattern on line 7 succeeds

Literals, Variables, and Wildcards in Patterns:-
------------------------------------------------

So far, we’ve shown match expressions working with enums. 
Other types can be matched too. When you need something like a C switch statement, 
use match with an integer value. Integer literals like 0 and 1 can serve as patterns:

match meadow.count_rabbits() {
    0 => {}  // nothing to say
    1 => println!("A rabbit is nosing around in the clover."),
    n => println!("There are {} rabbits hopping about in the meadow", n),
}

The pattern 0 matches if there are no rabbits in the meadow. 1 matches if there is just one. 
If there are two or more rabbits, we reach the third pattern, n. 
This pattern is just a variable name. It can match any value, and the matched value is moved or 
copied into a new local variable. So in this case, the value of meadow.count_rabbits() is stored 
in a new local variable n, which we then print.

