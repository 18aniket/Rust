Arrays, Vectors, and Slices
---------------------------

Rust has three types for representing a sequence of values in memory:

The type [T; N] represents an array of N values, each of type T. 
An array’s size is a constant determined at compile time and is part of the type; you can’t append new elements or shrink an array.

The type Vec<T>, called a vector of Ts, is a dynamically allocated, growable sequence of values of type T. 
A vector’s elements live on the heap, so you can resize vectors at will: push new elements onto them, append other vectors to them, delete elements, and so on.

The types &[T] and &mut [T], called a shared slice of Ts and mutable slice of Ts, are references to a series of elements that are a part of some other value, like an array or vector. 
You can think of a slice as a pointer to its first element, together with a count of the number of elements you can access starting at that point. 
A mutable slice &mut [T] lets you read and modify elements, but can’t be shared; a shared slice &[T] lets you share access among several readers, but doesn’t let you modify elements.

Given a value v of any of these three types, the expression v.len() gives the number of elements in v, and v[i] refers to the ith element of v. 
The first element is v[0], and the last element is v[v.len() - 1].
Rust checks that i always falls within this range; if it doesn’t, the expression panics.
The length of v may be zero, in which case any attempt to index it will panic. i must be a usize value; you can’t use any other integer type as an index.


*Arrays
There are several ways to write array values. The simplest is to write a series of values within square brackets:

let lazy_caterer: [u32; 6] = [1, 2, 4, 7, 11, 16];
let taxonomy = ["Animalia", "Arthropoda", "Insecta"];

assert_eq!(lazy_caterer[3], 7);
assert_eq!(taxonomy.len(), 3);

For the common case of a long array filled with some value, you can write [V; N], where V is the value each element should have, and N is the length. For example, [true; 10000] is an array of 10,000 bool elements, all set to true.

let mut sieve = [true; 10000];

You’ll see this syntax used for fixed-size buffers: [0u8; 1024] can be a one-kilobyte buffer, filled with zeros. Rust has no notation for an uninitialized array. (In general, Rust ensures that code can never access any sort of uninitialized value.)
