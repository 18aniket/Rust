Arrays, Vectors, and Slices
---------------------------

Rust has three types for representing a sequence of values in memory:

The type [T; N] represents an array of N values, each of type T. 
An array’s size is a constant determined at compile time and is part of the type; you can’t append new elements or shrink an array.

The type Vec<T>, called a vector of Ts, is a dynamically allocated, growable sequence of values of type T. 
A vector’s elements live on the heap, so you can resize vectors at will: push new elements onto them, append other vectors to them, delete elements, and so on.

The types &[T] and &mut [T], called a shared slice of Ts and mutable slice of Ts, are references to a series of elements that are a part of some other value, like an array or vector. 
You can think of a slice as a pointer to its first element, together with a count of the number of elements you can access starting at that point. 
A mutable slice &mut [T] lets you read and modify elements, but can’t be shared; a shared slice &[T] lets you share access among several readers, but doesn’t let you modify elements.

